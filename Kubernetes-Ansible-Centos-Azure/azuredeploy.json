{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "nameSuffix": {
      "type": "string",
      "defaultValue": "mskub8",
      "metadata": {
        "description": "Prefix of the components"
      }
    },
    "kubernetesVmSize": {
      "type": "string",
      "defaultValue": "Standard_A0",
      "allowedValues": [
        "Basic_A0","Basic_A1","Basic_A2","Basic_A3","Basic_A4",
        "Standard_A0","Standard_A1","Standard_A2","Standard_A3","Standard_A4","Standard_A5","Standard_A6","Standard_A7","Standard_A8","Standard_A9","Standard_A10","Standard_A11","Standard_D1",
        "Standard_D2","Standard_D3","Standard_D4","Standard_D11","Standard_D12","Standard_D13","Standard_D14",
        "Standard_D1_v2","Standard_D2_v2","Standard_D3_v2","Standard_D4_v2","Standard_D5_v2","Standard_D11_v2","Standard_D12_v2","Standard_D13_v2","Standard_D14_v2",
        "Standard_DS1","Standard_DS2","Standard_DS3","Standard_DS4","Standard_DS11","Standard_DS12","Standard_DS13","Standard_DS14",
        "Standard_G1","Standard_G2","Standard_G3","Standard_G4","Standard_G5","Standard_GS1","Standard_GS2","Standard_GS3","Standard_GS4","Standard_GS5"
      ],
      "metadata": {
        "description": "Instance size for Kubernetes VMs"
      }
    },
    "ansibleVmSize": {
      "type": "string",
      "defaultValue": "Standard_A0",
      "allowedValues": [
        "Basic_A0","Basic_A1","Basic_A2","Basic_A3","Basic_A4",
        "Standard_A0","Standard_A1","Standard_A2","Standard_A3","Standard_A4","Standard_A5","Standard_A6","Standard_A7","Standard_A8","Standard_A9","Standard_A10","Standard_A11","Standard_D1",
        "Standard_D2","Standard_D3","Standard_D4","Standard_D11","Standard_D12","Standard_D13","Standard_D14",
        "Standard_D1_v2","Standard_D2_v2","Standard_D3_v2","Standard_D4_v2","Standard_D5_v2","Standard_D11_v2","Standard_D12_v2","Standard_D13_v2","Standard_D14_v2",
        "Standard_DS1","Standard_DS2","Standard_DS3","Standard_DS4","Standard_DS11","Standard_DS12","Standard_DS13","Standard_DS14",
        "Standard_G1","Standard_G2","Standard_G3","Standard_G4","Standard_G5","Standard_GS1","Standard_GS2","Standard_GS3","Standard_GS4","Standard_GS5"
      ],
      "metadata": {
        "description": "Size of the Ansible virtual machine"
      }
    },
    "centosOSVersion": {
      "type": "string",
      "defaultValue": "7.0",
      "allowedValues": [
        "7.2",
        "7.1",
        "7.0"
      ],
      "metadata": {
        "description": "The CentOS version for the VM. This will pick a fully patched image of this given CentOS version. Allowed values are: 7.0, 7.1, 7.2"
      }
    },
    "numberOfMasters": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of kubernetes Masters nodes to create"
      }
    },
    "numberOfMinions": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of kubernetes Minions nodes to create"
      }
    },
    "numberOfEtcd": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of Etcd nodes to create"
      }
    },
    "adminUserName": {
      "type": "string",
      "defaultValue": "devops",
      "metadata": {
        "description": "Username to login to the VMs"
      }
    },
    "sshKeyData": {
      "type": "string",
      "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDLWadgtcq8rg0HMWlv1/1HQfRayLzGKmHg2ISmAJx+LQCa8SWCwBFGS0vKKwgdwhpMMCl0wI2/eURmxbpOF4Tp10jRikSIlSZyua7FU9VmlLWtYAmRQ42eWvmsCCI/IpgJ4LGODe8xDQtcXOtp3yUhkX5g9HHNwwR35Nnzum1VGMk4ftTA9CC3gfqWcIIKqQ+xE1BzqUNmGpJHghCgG/g8Oh7/sR05CXwASMoGTYuLpPHp2sEfGNm91CmnMa21ifaz4RMAcD2SwqReLgMmi0tZGUGQqLnzX/6ibJvpYSU5iZ/7qEzgDy83dBqaHbI0LEA4H0q59TJ2DWXYu+dloITz hleclerc@HeL.local",
      "metadata": {
        "description": "Public key for SSH authentication"
      }
    },
    "fileUris": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/DXFrance/AzureKubernetes/master/Kubernetes-Ansible-Centos-Azure/scripts/first-boot.sh",
      "metadata": {
        "description": "Deploy/SetUp script url for ansible control vm"
      }
    },
    "commandToExecute": {
      "type": "string",
      "defaultValue": "bash first-boot.sh",
      "metadata": {
        "description": "The command to execute."
      }
    },
    "vaultAccountName": {
      "type": "string",
      "defaultValue": "ansiblevault",
      "metadata": {
        "description": "Private storage account name in which you are storing your certificates for ansible and the template bash scripts"
      }
    }
  },
  "variables": {
    "apiVersion": "2015-06-15",
    "virtualNetworkName": "KubVNET",
    "addressPrefix": "10.0.0.0/16",
   
    "subnetAdminName": "SubnetADMIN",
    "subnetAdminPrefix": "10.0.2.0/24",
    "subnetAdminRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetAdminName'))]",
    
    "subnetMastersName": "SubnetMASTERS",
    "subnetMastersPrefix": "10.0.4.0/24",
    "subnetMastersRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetMastersName'))]",
    
    "subnetMinionsName": "SubnetMINIONS",
    "subnetMinionsPrefix": "10.0.6.0/24",
    "subnetMinionsRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetMinionsName'))]", 
    
    "subnetEtcdName": "SubnetETCD",
    "subnetEtcdPrefix": "10.0.8.0/24",
    "subnetEtcdRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetEtcdName'))]", 
       
    "storageAccountName": "[concat(uniquestring(resourceGroup().id), parameters('nameSuffix'))]",
    
    "availabilitySetMasters": "[concat('avma',parameters('nameSuffix'))]",
    "availabilitySetMinions": "[concat('avmi',parameters('nameSuffix'))]",
    "availabilitySetEtcd": "[concat('avet',parameters('nameSuffix'))]",
    
    "faultDomainCount": "3",
    "updateDomainCount": "10",
    "publicIPAddressType": "Dynamic",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    
    "storageAccountType": "Standard_LRS",
    
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "ansibleIPAddressName": "ansiblePip",
    "ansibleIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('ansibleIPAddressName'))]",
    
    "ansibleDomainName": "[concat('hc',parameters('nameSuffix'))]",
    "scriptBlobLocation": "scripts/deploy.sh",
    "scriptBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('scriptBlobLocation'))]",
    
    "keysBlobLocation": "keys/id_rsa",
    "keysBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('keysBlobLocation'))]",
    
    "pubBlobLocation": "keys/id_rsa.pub",
    "pubBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('pubBlobLocation'))]",
 
    "assetsStorageAccountId": "[resourceId('ansiblevault','Microsoft.Storage/storageAccounts', parameters('vaultAccountName'))]",
    
    "imageReference": {
      "publisher": "OpenLogic",
      "offer": "CentOS",
      "sku": "[parameters('centosOSVersion')]",
      "version": "latest"
    },
    
    "lbDomainName": "[concat('lb',parameters('nameSuffix'))]",
    "lbPublicIPAddressName": "lbPublicIP",
    "lbPublicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('lbPublicIPAddressName'))]",
    "lbName": "[concat('lb',parameters('nameSuffix'))]",
    "lbPublicIPAddressType": "Dynamic",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    
    "disablePasswordAuthentication": "true",
    "adminPassword": "V3l0C1RaPt0R#"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "name": "[variables('lbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('lbPublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontend",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('lbPublicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackend"
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('lbName'), '/', 'HTTP-80', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "lbKubUi",
        "count": "[parameters('numberOfMasters')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('frontEndIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(80)]",
        "backendPort": 80,
        "enableFloatingIP": false
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('apiVersion')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetMasters')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "PlatformFaultDomainCount": "[variables('faultDomainCount')]",
        "PlatformUpdateDomainCount": "[variables('updateDomainCount')]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetMinions')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "PlatformFaultDomainCount": "[variables('faultDomainCount')]",
        "PlatformUpdateDomainCount": "[variables('updateDomainCount')]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetEtcd')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "PlatformFaultDomainCount": "[variables('faultDomainCount')]",
        "PlatformUpdateDomainCount": "[variables('updateDomainCount')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('ansibleIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('ansibleDomainName')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('lbPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('lbPublicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('lbDomainName')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('apiVersion')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetMastersName')]",
            "properties": {
              "addressPrefix": "[variables('subnetMastersPrefix')]"
            }
          },
          {
            "name": "[variables('subnetMinionsName')]",
            "properties": {
              "addressPrefix": "[variables('subnetMinionsPrefix')]"
            }
          },
          {
            "name": "[variables('subnetEtcdName')]",
            "properties": {
              "addressPrefix": "[variables('subnetEtcdPrefix')]"
            }
          },
          {
            "name": "[variables('subnetAdminName')]",
            "properties": {
              "addressPrefix": "[variables('subnetAdminPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('mastersNic', copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopMasters",
        "count": "[parameters('numberOfMasters')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'), '/inboundNatRules/', 'HTTP-80', copyIndex())]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "MastersIpConfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetMastersRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/LoadBalancerBackend')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/HTTP-80', copyindex())]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('minionsNic', copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopMinions",
        "count": "[parameters('numberOfMinions')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "MinionsIpConfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetMinionsRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('etcdNic', copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopEtcd",
        "count": "[parameters('numberOfEtcd')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "MinionsIpConfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetMinionsRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "ansibleNic",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ansibleIpConfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses','ansiblePip')]"
              },
              "subnet": {
                "id": "[variables('subnetAdminRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('ansibleDomainName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', 'ansibleNic')]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/',variables('ansibleIPAddressName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('ansibleVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('ansibleDomainName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', variables('storageAccountName'), '.blob.core.windows.net/vhds/', variables('ansibleDomainName'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces','ansibleNic')]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat('ma', parameters('nameSuffix'), copyindex())]",
      "copy": {
        "name": "vmLoopMasters",
        "count": "[parameters('numberOfMasters')]"
      },
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', 'mastersNic', copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetMasters'))]"
      ],
      "apiVersion": "[variables('apiVersion')]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetMasters'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('kubernetesvmSize')]"
        },
        "osProfile": {
          "computerName": "[concat('ma-', parameters('nameSuffix'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "[concat('ma',parameters('nameSuffix'), copyindex())]",
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/','ma',parameters('nameSuffix'), copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('mastersNic',copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat('mi', parameters('nameSuffix'), copyindex())]",
      "copy": {
        "name": "vmLoopMinions",
        "count": "[parameters('numberOfMinions')]"
      },
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', 'minionsNic', copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetMinions'))]"
      ],
      "apiVersion": "[variables('apiVersion')]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetMinions'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('kubernetesvmSize')]"
        },
        "osProfile": {
          "computerName": "[concat('ma-', parameters('nameSuffix'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "[concat('mi',parameters('nameSuffix'), copyindex())]",
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/','mi',parameters('nameSuffix'), copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('minionsNic',copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat('et', parameters('nameSuffix'), copyindex())]",
      "copy": {
        "name": "vmLoopEtcd",
        "count": "[parameters('numberOfEtcd')]"
      },
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', 'etcdNic', copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetEtcd'))]"
      ],
      "apiVersion": "[variables('apiVersion')]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetEtcd'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('kubernetesvmSize')]"
        },
        "osProfile": {
          "computerName": "[concat('et-', parameters('nameSuffix'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "[concat('et',parameters('nameSuffix'), copyindex())]",
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/','et',parameters('nameSuffix'), copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('etcdNic',copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('ansibleDomainName'), '/install_ansible')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('ansibleDomainName'))]",
        "[variables('ansibleDomainName')]",
        "vmLoopMasters",
        "vmLoopMinions",
        "vmLoopEtcd",
        "extensionLoopMasters",
        "extensionLoopMinions",
        "extensionLoopEtcd"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "[variables('scriptBlobUrl')]",
            "[variables('keysBlobUrl')]",
            "[variables('pubBlobUrl')]"
          ],
          "commandToExecute": "[concat('bash deploy.sh ',parameters('numberOfMasters'), ' ',parameters('numberOfMinions'), ' ',parameters('numberOfEtcd'), ' ', variables('subnetMastersPrefix'), ' ', variables('subnetMinionsPrefix'), ' ',variables('subnetEtcdPrefix'), ' ',parameters('nameSuffix'), ' ', ' ', reference(variables('ansibleIPAddressID'),providers('Microsoft.Network','publicIPAddresses').apiVersions[0]).dnsSettings.fqdn,' ', parameters('adminUsername'), ' ', reference(variables('lbPublicIPAddressID'),providers('Microsoft.Network','publicIPAddresses').apiVersions[0]).dnsSettings.fqdn)]"
        },
        "protectedSettings": {
          "storageAccountName": "[parameters('vaultAccountName')]",
          "storageAccountKey": "[listKeys(variables('assetsStorageAccountId'),'2015-05-01-preview').key1]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat('ma', parameters('nameSuffix'),copyIndex(),'/ma', parameters('nameSuffix'))]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "extensionLoopMasters",
        "count": "[parameters('numberOfMasters')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', 'ma', parameters('nameSuffix'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "[parameters('fileUris')]"
          ],
          "commandToExecute": "[concat(parameters('commandToExecute'), ' ', reference(concat('mastersNic', copyindex())).ipConfigurations[0].properties.privateIPAddress,' masters')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat('mi', parameters('nameSuffix'),copyIndex(),'/mi', parameters('nameSuffix'))]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "extensionLoopMinions",
        "count": "[parameters('numberOfMinions')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', 'mi', parameters('nameSuffix'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "[parameters('fileUris')]"
          ],
          "commandToExecute": "[concat(parameters('commandToExecute'), ' ', reference(concat('minionsNic', copyindex())).ipConfigurations[0].properties.privateIPAddress,' minions')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat('et', parameters('nameSuffix'),copyIndex(),'/et', parameters('nameSuffix'))]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "extensionLoopEtcd",
        "count": "[parameters('numberOfEtcd')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', 'et', parameters('nameSuffix'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "[parameters('fileUris')]"
          ],
          "commandToExecute": "[concat(parameters('commandToExecute'), ' ', reference(concat('etcdNic', copyindex())).ipConfigurations[0].properties.privateIPAddress,' etcd')]"
        }
      }
    }
  ]
}