{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSuffix": {
      "type": "string",
      "defaultValue": "mskub8",
      "metadata": {
        "description": "Suffix of the vms, and load balancers"
      }
    },
    "newStorageAccountName": {
      "type": "string",
      "defaultValue": "mskubstorage",
      "metadata": {
        "description": "Name of the storage account for VM OS Disks"
      }
    },
    "KubernetesVmSize": {
      "type": "string",
      "defaultValue": "Standard_A0",
      "allowedValues": [
	 	  "Standard_A0",
		  "Standard_A1",
		  "Standard_A2",
		  "Standard_A3",
		  "Standard_A4",
		  "Basic_A0",
		  "Basic_A1",
		  "Basic_A2",
		  "Basic_A3",
		  "Basic_A4",
		  "Standard_A5",
		  "Standard_A6",
		  "Standard_A7",
		  "Standard_D1",
		  "Standard_D2",
		  "Standard_D3",
		  "Standard_D4",
		  "Standard_D11",
		  "Standard_D12",
		  "Standard_D13",
		  "Standard_D14",
		  "Standard_D1_v2",
		  "Standard_D2_v2",
		  "Standard_D3_v2",
		  "Standard_D4_v2",
		  "Standard_D5_v2",
		  "Standard_D11_v2",
		  "Standard_D12_v2",
		  "Standard_D13_v2",
		  "Standard_D14_v2",
		  "Standard_DS1",
		  "Standard_DS2",
		  "Standard_DS3",
		  "Standard_DS4",
		  "Standard_DS11",
		  "Standard_DS12",
		  "Standard_DS13",
		  "Standard_DS14",
		  "Standard_G1",
		  "Standard_G2",
		  "Standard_G3",
		  "Standard_G4",
		  "Standard_G5",
		  "Standard_GS1",
		  "Standard_GS2",
		  "Standard_GS3",
		  "Standard_GS4",
		  "Standard_GS5",
		  "Standard_A8",
		  "Standard_A9",
		  "Standard_A10",
		  "Standard_A11"
	    ],
      "metadata": {
        "description": "Instance size for the VMs"
      }
    },
    "centosOSVersion":{
      "type":"string",
      "defaultValue":"7.0",
      "allowedValues":[
        "7.2",
        "7.1",
        "7.0"
      ],
      "metadata":{
        "description":"The CentOS version for the VM. This will pick a fully patched image of this given CentOS version. Allowed values are: 7.0, 7.1, 7.2"
      }
    },
    "numberOfNodes": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of kubernetes nodes to create"
      }
    },
    "adminUserName": {
      "type": "string",
      "defaultValue": "devops",
      "metadata": {
        "description": "Username to login to the VMs"
      }
    },
    "sshKeyData": {
      "type": "string",
      "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDLWadgtcq8rg0HMWlv1/1HQfRayLzGKmHg2ISmAJx+LQCa8SWCwBFGS0vKKwgdwhpMMCl0wI2/eURmxbpOF4Tp10jRikSIlSZyua7FU9VmlLWtYAmRQ42eWvmsCCI/IpgJ4LGODe8xDQtcXOtp3yUhkX5g9HHNwwR35Nnzum1VGMk4ftTA9CC3gfqWcIIKqQ+xE1BzqUNmGpJHghCgG/g8Oh7/sR05CXwASMoGTYuLpPHp2sEfGNm91CmnMa21ifaz4RMAcD2SwqReLgMmi0tZGUGQqLnzX/6ibJvpYSU5iZ/7qEzgDy83dBqaHbI0LEA4H0q59TJ2DWXYu+dloITz hleclerc@HeL.local",
      "metadata": {
        "description": "Public key for SSH authentication"
      }
    },
    "fileUris": {
      "type": "string",
      "defaultValue": "https://something.com/deploy.sh",
      "metadata": {
        "description": "Deploy/SetUp script url for ansible control vm"
      }
    },
    "commandToExecute": {
      "type": "string",
      "defaultValue": "bash deploy.sh",
      "metadata": {
        "description": "The command to execute."
      }
    },
    "ansibleVmSize": {
      "type": "string",
      "defaultValue": "Standard_A0",
      "metadata": {
        "description": "Size of the Ansible virtual machine"
      }
    },
    "kubernetesVmSize": {
      "type": "string",
      "defaultValue": "Standard_A0",
      "metadata": {
        "description": "Size of the Ansible virtual machine"
      }
    },
    "vaultAccountName": {
      "type": "string",
      "defaultValue": "ansiblevault",
      "metadata": {
        "description": "Private storage account name in which you are storing your certificates for ansible and the template bash scripts"
      }
    }
  },
  "variables": {
    "apiVersion": "2015-06-15",
    "virtualNetworkName": "KubVNET",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "Subnet-1",
    "subnet1Prefix": "10.0.0.0/24",
    "vmNamePrefix": "[concat('aw',parameters('vmSuffix'))]",
    "storageAccountName": "[concat(uniquestring(resourceGroup().id), variables('vmNamePrefix'))]",
    "availabilitySet": "[concat('av',variables('vmNamePrefix'))]",
    "faultDomainCount": "3",
    "updateDomainCount": "10",
    "publicIPAddressType": "Dynamic",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/',variables('subnet1Name'))]",
    "vmStorageAccountContainerName": "vhds",
    "storageAccountType": "Standard_LRS",
    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "ansibleIPAddressName": "ansiblepip",
    "ansibleIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('ansibleIPAddressName'))]",
    "subnetDmzName": "Subnet-DMZ",
    "subnetDmzPrefix": "10.0.2.0/24",
    "subnetDmzRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetDmzName'))]",
    "hcDomainName": "[concat('hc',variables('vmNamePrefix'))]",
    "scriptBlobLocation": "scripts/deploy-via-ansible.sh",
    "scriptBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('scriptBlobLocation'))]",
    "keysBlobLocation": "keys/id_rsa",
    "keysBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('keysBlobLocation'))]",
    "pubBlobLocation": "keys/id_rsa.pub",
    "pubBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('pubBlobLocation'))]",
    "playBlobLocation": "playbooks/crate-setup.yml",
    "playBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('playBlobLocation'))]",
    "assetsStorageAccountId": "[resourceId('ansiblevault','Microsoft.Storage/storageAccounts', parameters('vaultAccountName'))]",
    "imageReference": {
            "publisher": "OpenLogic",
            "offer": "CentOS",
            "sku":"[parameters('centosOSVersion')]",
            "version": "latest"
    },
    "lbDomainName": "[concat('lb',variables('vmNamePrefix'))]",
    "lbPublicIPAddressName": "viplb",
    "lbPublicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('lbPublicIPAddressName'))]",
    "lbName": "cratelb",
    "lbPublicIPAddressType": "Dynamic",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    "disablePasswordAuthentication": "true",
    "adminPassword": "V3l0C1RaPt0R#"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersion')]",
      "name": "[variables('lbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('lbPublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontend",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('lbPublicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LoadBalancerBackend"
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('lbName'), '/', 'CRATE-420', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "lbNatLoop",
        "count": "[parameters('numberOfNodes')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('frontEndIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(4200)]",
        "backendPort": 4200,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('lbName'), '/', 'CRATE-430', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "lbNatLoop2",
        "count": "[parameters('numberOfNodes')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('frontEndIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(4300)]",
        "backendPort": 4300,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('lbName'), '/', 'SSH-220', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "lbNatLoop3",
        "count": "[parameters('numberOfNodes')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('frontEndIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(2200)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('hcdomainName'), '/install_ansible')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('hcdomainName'))]",
        "[variables('hcDomainName')]",
        "vmLoop",
        "extensionLoop"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "[variables('scriptBlobUrl')]",
            "[variables('keysBlobUrl')]",
            "[variables('pubBlobUrl')]",
            "[variables('playBlobUrl')]"
          ],
          "commandToExecute": "[concat('bash deploy-via-ansible.sh ', parameters('numberOfNodes'), ' ', variables('vmNamePrefix'),' ', reference(variables('ansibleIPAddressID'),providers('Microsoft.Network','publicIPAddresses').apiVersions[0]).dnsSettings.fqdn,' ', parameters('adminUsername'), ' ', reference(variables('lbPublicIPAddressID'),providers('Microsoft.Network','publicIPAddresses').apiVersions[0]).dnsSettings.fqdn)]"
        },
        "protectedSettings": {
          "storageAccountName": "[parameters('vaultAccountName')]",
          "storageAccountKey": "[listKeys(variables('assetsStorageAccountId'),'2015-05-01-preview').key1]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNamePrefix'),copyIndex(),'/', variables('vmNamePrefix'))]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "extensionLoop",
        "count": "[parameters('numberOfNodes')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNamePrefix'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "[parameters('fileUris')]"
          ],
          "commandToExecute": "[concat(parameters('commandToExecute'), ' ', reference(concat('nic', copyindex())).ipConfigurations[0].properties.privateIPAddress)]"
        }     
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('newStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('apiVersion')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySet')]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "PlatformFaultDomainCount": "[variables('faultDomainCount')]",
        "PlatformUpdateDomainCount": "[variables('updateDomainCount')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('ansibleIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('hcDomainName')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('lbPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('lbPublicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('lbDomainName')]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "nicansible",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses','ansiblepip')]"
              },
              "subnet": {
                "id": "[variables('subnetDmzRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('apiVersion')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          },
          {
            "name": "[variables('subnetDmzName')]",
            "properties": {
              "addressPrefix": "[variables('subnetDmzPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('nic', copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('numberOfNodes')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'), '/inboundNatRules/', 'CRATE-420', copyIndex())]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'), '/inboundNatRules/', 'CRATE-430', copyIndex())]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'), '/inboundNatRules/', 'SSH-220', copyIndex())]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/LoadBalancerBackend')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/CRATE-420', copyindex())]"
                },
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/CRATE-430', copyindex())]"
                },
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/SSH-220', copyindex())]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('hcDomainName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', 'nicansible')]",
        "[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('ansibleVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('hcDomainName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', parameters('newStorageAccountName'), '.blob.core.windows.net/vhds/', variables('hcDomainName'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces','nicansible')]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNamePrefix'), copyindex())]",
      "copy": {
        "name": "vmLoop",
        "count": "[parameters('numberOfNodes')]"
      },
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', 'nic', copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySet'))]"
      ],
      "apiVersion": "[variables('apiVersion')]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('kubernetesvmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNamePrefix'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "[concat(variables('vmNamePrefix'), copyindex())]",
            "vhd": {
              "uri": "[concat('http://',parameters('newStorageAccountName'),'.blob.core.windows.net/vhds/',variables('vmNamePrefix'), copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('nic',copyindex()))]"
            }
          ]
        }
      }
    }
  ]
}
