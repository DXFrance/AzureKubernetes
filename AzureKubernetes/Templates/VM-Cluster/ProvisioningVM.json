{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "apiVersion": {
      "type": "string",
      "metadata": {
        "description": "Schema api version from parent template"
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix of the components"
      }
    },
    "numberOfMasters": {
      "type": "int",
      "metadata": {
        "description": "Number of kubernetes Master nodes to create"
      }
    },
    "numberOfMinions": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of kubernetes Minion nodes to create"
      }
    },
    "numberOfEtcd": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of Etcd nodes to create"
      }
    },
    "etcdAvailabilitySetName": {
      "type": "string",
      "metadata": {
        "description": "etcd AvailabilitySet Name"
      }
    },
    "kubeMastersAvailabilitySetName": {
      "type": "string",
      "metadata": {
        "description": "kube Masters AvailabilitySet Name"
      }
    },
    "kubeMinionsAvailabilitySetName": {
      "type": "string",
      "metadata": {
        "description": "kube Minions AvailabilitySet Name"
      }
    },
    "etcdStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "etcd StorageAccount Name"
      }
    },
    "kubeMastersStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "kube StorageAccount Name"
      }
    },
    "kubeMinionsStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "kube StorageAccount Name"
      }
    },
    "ansibleStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "ansible StorageAccount Name"
      }
    },
    "ansibleNicName": {
      "type": "string",
      "metadata": {
        "description": "ansible NicName"
      }
    },
    "kubeMasterNicName": {
      "type": "string",
      "metadata": {
        "description": "kube Master NicName"
      }
    },
    "kubeMinionNicName": {
      "type": "string",
      "metadata": {
        "description": "kube Minion NicName"
      }
    },
    "etcdNicName": {
      "type": "string",
      "metadata": {
        "description": "kube Minion NicName"
      }
    },
    "kubernetesVmSize": {
      "type": "string",
      "metadata": {
        "description": "Instance size for Kubernetes VMs"
      }
    },
    "ansibleVmSize": {
      "type": "string",
      "metadata": {
        "description": "Size of the Ansible virtual machine"
      }
    },
    "adminUserName": {
      "type": "string",
      "metadata": {
        "description": "Username for login to the VMs"
      }
    },
    "adminPassword": {
      "type": "string",
      "metadata": {
        "description": "Password for login to the VMs"
      }
    },
    "sshKeyData": {
      "type": "string",
      "metadata": {
        "description": "Public key for SSH authentication"
      }
    },
    "centosOSVersion": {
      "type": "string",
      "metadata": {
        "description": "The CentOS version for the VM. This will pick a fully patched image of this given CentOS version. Allowed values are: 7.0, 7.1, 7.2"
      }
    },
    "vaultAccountName": {
      "type": "string",
      "metadata": {
        "description": "Private storage account name in which you are storing your certificates for ansible and the template bash scripts"
      }
    }
  },
  "variables": {
    "ansibleVmName": "[concat(parameters('prefix'),'-ansible')]",
    "ansibleOsDiskName": "[concat(parameters('prefix'),'-ansible-os')]",

    "kubeMasterVmName": "[concat(parameters('prefix'),'-kube-master-')]",
    "kubeMasterOsDiskName": "[concat(parameters('prefix'),'-kube-master-os-')]",
    "kubeMasterDataDiskName": "[concat(parameters('prefix'),'-kube-master-data-')]",
    
    "kubeMinionVmName": "[concat(parameters('prefix'),'-kube-minion-')]",
    "kubeMinionOsDiskName": "[concat(parameters('prefix'),'-kube-minion-os-')]",
    "kubeMinionDataDiskName": "[concat(parameters('prefix'),'-kube-minion-data-')]",
    
    "etcdVmName": "[concat(parameters('prefix'),'-etcd-')]",
    "etcdOsDiskName": "[concat(parameters('prefix'),'-etcd-os-')]",
    "etcdDataDiskName": "[concat(parameters('prefix'),'-etcd-data-')]",

    "sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "imageReference": {
      "publisher": "OpenLogic",
      "offer": "CentOS",
      "sku": "[parameters('centosOSVersion')]",
      "version": "latest"
    },
    "scriptBlobLocation": "scripts/deploy.sh",
    "scriptBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('scriptBlobLocation'))]",

    "keysBlobLocation": "keys/id_rsa",
    "keysBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('keysBlobLocation'))]",

    "pubBlobLocation": "keys/id_rsa.pub",
    "pubBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('pubBlobLocation'))]",

    "assetsStorageAccountId": "[resourceId(parameters('vaultAccountName'),'Microsoft.Storage/storageAccounts', parameters('vaultAccountName'))]",

    "adminPassword": "V3l0C1RaPt0R#",
    "disablePasswordAuthentication": "true"
  },
  "resources": [
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('ansibleVMName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('ansibleVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('ansibleVMName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', parameters('ansibleStorageAccountName'), '.blob.core.windows.net/vhds/', variables('ansibleOSDiskName'), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',parameters('ansibleNicName'))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('kubeMasterVmName'), copyindex())]",
      "copy": {
        "name": "vmLoopMasters",
        "count": "[parameters('numberOfMasters')]"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('kubeMastersAvailabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('kubernetesvmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('kubeMasterVmName'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "[concat(variables('kubeMasterOsDiskName'), copyindex())]",
            "vhd": {
              "uri": "[concat('http://',parameters('kubeMastersStorageAccountName'),'.blob.core.windows.net/vhds/', variables('kubemasterOsDiskName'), copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "[concat(variables('kubeMasterDataDiskName'), copyindex())]",
              "diskSizeGB": "1000",
              "lun": 0,
              "vhd": {
                "uri": "[concat('http://', parameters('kubeMastersStorageAccountName'),'.blob.core.windows.net/vhds/', variables('kubemasterDataDiskName'), copyIndex(), '.vhd')]"
              },
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('kubeMasterNicName'),copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('kubeMinionVmName'), copyindex())]",
      "copy": {
        "name": "vmLoopMinions",
        "count": "[parameters('numberOfMinions')]"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('kubeMinionsAvailabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('kubernetesVmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('kubeMinionVMName'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "[concat(variables('kubeMinionOsDiskName'), copyindex())]",
            "vhd": {
              "uri": "[concat('http://', parameters('kubeMinionsStorageAccountName'),'.blob.core.windows.net/vhds/',variables('kubeMinionOsDiskName'), copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "[concat(variables('kubeMinionDataDiskName'), copyindex())]",
              "diskSizeGB": "1000",
              "lun": 0,
              "vhd": {
                "uri": "[concat('http://', parameters('kubeMinionsStorageAccountName'),'.blob.core.windows.net/vhds/', variables('kubeMinionDataDiskName'), copyIndex(), '.vhd')]"
              },
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('kubeMinionNicName'),copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('etcdVMName'), copyindex())]",
      "copy": {
        "name": "vmLoopEtcd",
        "count": "[parameters('numberOfEtcd')]"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('etcdAvailabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('kubernetesvmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('etcdVMName'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "[concat(variables('etcdOsDiskName'), copyindex())]",
            "vhd": {
              "uri": "[concat('http://',parameters('etcdStorageAccountName'),'.blob.core.windows.net/vhds/', variables('etcdOsDiskName'), copyindex(),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "[concat(variables('etcdDataDiskName'), copyindex())]",
              "diskSizeGB": "1000",
              "lun": 0,
              "vhd": {
                "uri": "[concat('http://', parameters('etcdStorageAccountName'),'.blob.core.windows.net/vhds/', variables('etcdDataDiskName'), copyIndex(), 'datadisk1.vhd')]"
              },
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('etcdNicName'),copyindex()))]"
            }
          ]
        }
      }
    }

  ],
  "outputs": {
    "result": {
      "value": "VM Provisioning achieved",
      "type": "string"
    }
  }
  }