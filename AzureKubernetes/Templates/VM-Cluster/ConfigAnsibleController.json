{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "apiVersion": {
      "type": "string",
      "metadata": {
        "description": "Schema api version from parent template"
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix of the components"
      }
    },
    "numberOfMasters": {
      "type": "int",
      "metadata": {
        "description": "Number of kubernetes Master nodes to create"
      }
    },
    "numberOfMinions": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of kubernetes Minion nodes to create"
      }
    },
    "numberOfEtcdNodes": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of Etcd nodes to create"
      }
    },
    "ansibleNicName": {
      "type": "string",
      "metadata": {
        "description": "ansible NicName"
      }
    },
    "ansibleStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "ansible StorageAccount Name"
      }
    },
    "subnetAdminRef": {
      "type": "string",
      "metadata": {
        "description": "subnet Admin"
      }
    },
    "ansibleVmSize": {
      "type": "string",
      "metadata": {
        "description": "Size of the Ansible virtual machine"
      }
    },
    "adminSubnetCIDR": {
      "type": "string",
      "metadata": {
        "description": "subnet Admin CIDR"
      }
    },
    "mastersSubnetCIDR": {
      "type": "string",
      "metadata": {
        "description": "subnet Masters CIDR"
      }
    },
    "minionsSubnetCIDR": {
      "type": "string",
      "metadata": {
        "description": "subnet Minions CIDR"
      }
    },
    "etcdSubnetCIDR": {
      "type": "string",
      "metadata": {
        "description": "subnet Etcd CIDR"
      }
    },
    "ansibleIPAddressName": {
      "type": "string",
      "metadata": {
        "description": "ansible IP Address Name"
      }
    },
    "kubeMastersLbPIPAddressName": {
      "type": "string",
      "metadata": {
        "description": "kubeMastersLbPIPAddressName IP Address Name"
      }
    },
    "adminUserName": {
      "type": "string",
      "metadata": {
        "description": "Username for login to the VMs"
      }
    },
    "adminPassword": {
      "type": "string",
      "metadata": {
        "description": "Password for login to the VMs"
      }
    },
    "sshKeyData": {
      "type": "string",
      "metadata": {
        "description": "Public key for SSH authentication"
      }
    },
    "centosOSVersion": {
      "type": "string",
      "metadata": {
        "description": "The CentOS version for the VM. This will pick a fully patched image of this given CentOS version. Allowed values are: 7.0, 7.1, 7.2"
      }
    },
    "vaultAccountName": {
      "type": "string",
      "metadata": {
        "description": "Private storage account name in which you are storing your certificates for ansible and the template bash scripts"
      }
    },
    "keyStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "key StorageAccount Name"
      }
    },
    "configScriptsBaseURL": {
      "type": "string",
      "metadata": {
        "description": "Config scripts base url"
      },
      "defaultValue": ""
    }
  },
  "variables": {
    "ansibleIPAddressName": "[concat(parameters('prefix'),'-pip-ansible')]",
    "ansibleVmName": "[concat(parameters('prefix'),'-ansible')]",
    "ansibleOsDiskName": "[concat(parameters('prefix'),'-ansible-os')]",
    "nicPIPAddressType": "Dynamic",
    "sshKeyPath": "[concat('/home/',parameters('adminUserName'),'/.ssh/authorized_keys')]",
    "imageReference": {
      "publisher": "OpenLogic",
      "offer": "CentOS",
      "sku": "[parameters('centosOSVersion')]",
      "version": "latest"
    },
    "scriptBlobLocation": "scripts/config-ansible.sh",
    "scriptBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('scriptBlobLocation'))]",

    "keysBlobLocation": "keys/id_rsa",
    "keysBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('keysBlobLocation'))]",

    "pubBlobLocation": "keys/id_rsa.pub",
    "pubBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('pubBlobLocation'))]",

    "customScriptDeployFile": "config-ansible.sh",
    "customScriptDeployURL": "[concat(parameters('configScriptsBaseURL'),'/',variables('customScriptDeployFile'))]",
    "customScriptAnsibleCommand": "[concat('bash ',variables('customScriptDeployFile'))]",
    "pythonAzureScriptURL": "[concat(parameters('configScriptsBaseURL'),'/','WriteSSHToPrivateStorage.py')]",

    "tokenBlobLocation": "keys/slack-token.tok",
    "tokenBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('tokenBlobLocation'))]",

    "assetsStorageAccountId": "[resourceId(parameters('vaultAccountName'),'Microsoft.Storage/storageAccounts', parameters('vaultAccountName'))]",
    "ansibleIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('ansibleIPAddressName'))]",
    "kubeMastersLbPIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('kubeMastersLbPIPAddressName'))]",

    "adminPassword": "V3l0C1RaPt0R#",
    "disablePasswordAuthentication": "true"
  },
  "resources": [
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[parameters('ansibleNicName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ansibleIpConfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('ansibleIPAddressName'))]"
              },
              "subnet": {
                "id": "[parameters('subnetAdminRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('ansibleVmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/',parameters('ansibleNicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('ansibleVmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('ansibleVmName')]",
          "adminUserName": "[parameters('adminUserName')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', parameters('ansibleStorageAccountName'), '.blob.core.windows.net/vhds/', variables('ansibleOSDiskName'), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',parameters('ansibleNicName'))]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('ansibleVMName'),'/ansible')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/',concat(variables('ansibleVmName')))]",
        "[concat('Microsoft.Network/networkInterfaces/',parameters('ansibleNicName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4",
        "settings": {
          "fileUris": [
            "[variables('customScriptDeployUrl')]",
            "[variables('pythonAzureScriptURL')]"
          ],
          "timestamp": "variables('ansibleIPAddressID')"
        },
        "protectedSettings": {
          "commandToExecute": "[concat(variables('customScriptAnsibleCommand'), ' \"', parameters('numberOfMasters'), '\" \"', parameters('numberOfMinions'), '\" \"', parameters('numberOfEtcdNodes'),'\" \"', parameters('mastersSubnetCIDR'),'\" \"', parameters('minionsSubnetCIDR'),'\" \"', parameters('etcdSubnetCIDR'), '\" \"', parameters('prefix'), '\" \"', reference(variables('ansibleIPAddressID'),providers('Microsoft.Network','publicIPAddresses').apiVersions[0]).dnsSettings.fqdn, '\" \"', parameters('adminUserName'), '\" \"', reference(variables('kubeMastersLbPIPAddressID'),providers('Microsoft.Network','publicIPAddresses').apiVersions[0]).dnsSettings.fqdn, '\" \"', parameters('keyStorageAccountName'), '\" \"', listKeys(concat('Microsoft.Storage/storageAccounts/',parameters('keyStorageAccountName')),'2015-05-01-preview').key1, '\"')]"
        }
      }
    }
  ],
  "outputs": {
    "result": {
      "value": "Configuration Ansible Controller Provisioning achieved",
      "type": "string"
    }
  }
}