{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "apiVersion": {
      "type": "string",
      "metadata": {
        "description": "Schema api version from parent template"
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix of the components"
      }
    },
    "numberOfMasters": {
      "type": "int",
      "metadata": {
        "description": "Number of kubernetes Master nodes to create"
      }
    },
    "numberOfMinions": {
      "type": "int",
      "metadata": {
        "description": "Number of kubernetes Minion nodes to create"
      }
    },
    "ansibleIPAddressName": {
      "type": "string",
      "metadata": {
        "description": "Ansible IP Address Name"
      }
    },
    "kubeMastersLbPIPAddressName": {
      "type": "string",
      "metadata": {
        "description": "Kube master nodes LB IP Address Name"
      }
    },
    "kubeMinionsLbPIPAddressName": {
      "type": "string",
      "metadata": {
        "description": "Kube minion nodes LB IP Address Name"
      }
    }
  },
  "variables": {
    "ansibleDomainName": "[concat(parameters('prefix'),'-ansible')]",

    "kubeMastersLbName": "[concat(parameters('prefix'),'-lb-kube-masters')]",
    "kubeMastersLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('kubeMastersLbName'))]",
    "kubeMastersDomainName": "[concat(parameters('prefix'),'-kube-masters')]",
    "kubeMastersLbFEName": "[concat(parameters('prefix'),'-fe-kube-masters')]",
    "kubeMastersLbFEID": "[concat(variables('kubeMastersLbID'),'/frontendIPConfigurations/',variables('kubeMastersLbFEName'))]",
    "kubeMastersLbBEPoolName": "[concat(parameters('prefix'),'-be-kube-masters')]",
    "kubeMastersLbBEPoolID": "[concat(variables('kubeMastersLbID'),'/backendAddressPools/',variables('kubeMastersLbBEPoolName'))]",
    "kubeMastersLbPIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('kubeMastersLbPIPAddressName'))]",
    "kubeMastersLbNatRulesCopy": "lbnrcopy-kube-masters",
    "kubeMastersLbProbeName": "[concat(parameters('prefix'),'-lb-kube-masters-probe')]",
    "kubeMastersLbProbeID": "[concat(variables('kubeMastersLbID'),'/probes/',variables('kubeMastersLbProbeName'))]",
    "kubeMastersLbRulesName": "[concat(parameters('prefix'),'-lb-kube-masters-HTTP')]",

    "kubeMinionsLbName": "[concat(parameters('prefix'),'-lb-kube-minions')]",
    "kubeMinionsLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('kubeMinionsLbName'))]",
    "kubeMinionsDomainName": "[concat(parameters('prefix'),'-kube-minions')]",
    "kubeMinionsLbFEName": "[concat(parameters('prefix'),'-fe-kube-minions')]",
    "kubeMinionsLbFEID": "[concat(variables('kubeMinionsLbID'),'/frontendIPConfigurations/',variables('kubeMinionsLbFEName'))]",
    "kubeMinionsLbBEPoolName": "[concat(parameters('prefix'),'-be-kube-minions')]",
    "kubeMinionsLbBEPoolID": "[concat(variables('kubeMinionsLbID'),'/backendAddressPools/',variables('kubeMinionsLbBEPoolName'))]",
    "kubeMinionsLbPIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('kubeMinionsLbPIPAddressName'))]",
    "kubeMinionsLbNatRulesCopy": "lbnrcopy-kube-minions",
    "kubeMinionsLbProbeName": "[concat(parameters('prefix'),'-lb-kube-minions-probe')]",
    "kubeMinionsLbProbeID": "[concat(variables('kubeMinionsLbID'),'/probes/',variables('kubeMinionsLbProbeName'))]",
    "kubeMinionsLbRulesName": "[concat(parameters('prefix'),'-lb-kube-minions-HTTP')]",

    "PIPAddressType": "Dynamic"
  },
  "resources": [
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('kubeMastersLbPIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('PIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('kubeMastersDomainName')]"
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('kubeMinionsLbPIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('PIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('kubeMinionsDomainName')]"
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "name": "[variables('kubeMastersLbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('kubeMastersLbPIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('kubeMastersLbFEName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('kubeMastersLbPIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('kubeMastersLbBEPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[variables('kubeMastersLbRulesName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('kubeMastersLbFEID')]"
              },
              "backendAddressPool": {
                "id": "[variables('kubeMastersLbBEPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "probe": {
                "id": "[variables('kubeMastersLbProbeID')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('kubeMastersLbProbeName')]",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "name": "[variables('kubeMinionsLbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('kubeMinionsLbPIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('kubeMinionsLbFEName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('kubeMinionsLbPIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('kubeMinionsLbBEPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[variables('kubeMinionsLbRulesName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('kubeMinionsLbFEID')]"
              },
              "backendAddressPool": {
                "id": "[variables('kubeMinionsLbBEPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 9090,
              "backendPort": 9090,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('kubeMinionsLbProbeID')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('kubeMinionsLbProbeName')]",
            "properties": {
              "protocol": "Http",
              "port": 9090,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('kubeMastersLbName'), '/', 'SSH-', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "[variables('kubeMastersLbNatRulesCopy')]",
        "count": "[parameters('numberOfMasters')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('kubeMastersLbName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('kubeMastersLbFEID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(22)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('kubeMinionsLbName'), '/', 'SSH-', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "[variables('kubeMinionsLbNatRulesCopy')]",
        "count": "[parameters('numberOfMinions')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('kubeMinionsLbName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('kubeMinionsLbFEID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(22)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('ansibleIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('PIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('ansibleDomainName')]"
        }
      }
    }

  ],
  "outputs": {
    "kubeMastersLbID": {
      "type": "string",
      "value": "[variables('kubeMastersLbID')]"
    },
    "kubeMastersLbBackendPoolID": {
      "type": "string",
      "value": "[variables('kubeMastersLbBEPoolID')]"
    },
    "kubeMinionsLbID": {
      "type": "string",
      "value": "[variables('kubeMinionsLbID')]"
    },
    "kubeMinionsLbBackendPoolID": {
      "type": "string",
      "value": "[variables('kubeMinionsLbBEPoolID')]"
    },
    "result": {
      "value": "Load Balancers and IP Provisioning achieved",
      "type": "string"
    }
  }
}