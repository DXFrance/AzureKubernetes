{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "apiVersion": {
      "type": "string",
      "metadata": {
        "description": "Schema api version from parent template"
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix of the components"
      }
    },
    "numberOfMasters": {
      "type": "int",
      "metadata": {
        "description": "Number of kubernetes Master nodes to create"
      }
    },
    "numberOfMinions": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of kubernetes Minion nodes to create"
      }
    },
    "numberOfEtcd": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of Etcd nodes to create"
      }
    },
    "vaultAccountName": {
      "type": "string",
      "defaultValue": "kub8vault",
      "metadata": {
        "description": "Private storage account name in which you are storing your certificates for ansible and the template bash scripts"
      }
    },
    "subnetAdminPrefix": {
      "type": "string",
      "metadata": {
        "description": "subnet Admin Prefix"
      }
    },
    "subnetMastersPrefix": {
      "type": "string",
      "metadata": {
        "description": "subnet Masters Prefix"
      }
    },
    "subnetMinionsPrefix": {
      "type": "string",
      "metadata": {
        "description": "subnet Minions Prefix"
      }
    },
    "subnetEtcdPrefix": {
      "type": "string",
      "metadata": {
        "description": "subnet Etcd Prefix"
      }
    },
    "ansibleIPAddressName": {
      "type": "string",
      "metadata": {
        "description": "ansible IP Address Name"
      }
    },
    "kubemastersLbPIPAddressName": {
      "type": "string",
      "metadata": {
        "description": "ansible IP Address Name"
      }
    },
    "adminUserName": {
      "type": "string",
      "metadata": {
        "description": "Username for login to the VMs"
      }
    },
    "fileUris": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/DXFrance/AzureKubernetes/master/Kubernetes-Ansible-Centos-Azure/scripts/first-boot.sh",
      "metadata": {
        "description": "Deploy/SetUp script url for ansible control vm"
      }
    },
    "commandToExecute": {
      "type": "string",
      "defaultValue": "bash first-boot.sh",
      "metadata": {
        "description": "The command to execute."
      }
    },
    "kubeMasterNicName": {
      "type": "string",
      "metadata": {
        "description": "kube Master NicName"
      }
    },
    "kubeMinionNicName": {
      "type": "string",
      "metadata": {
        "description": "kube Minion NicName"
      }
    },
    "etcdNicName": {
      "type": "string",
      "metadata": {
        "description": "kube Minion NicName"
      }
    }
  },
  "variables": {
    "ansibleVMName": "[concat(parameters('prefix'), '-ansible')]",
    "kubeMasterVmName": "[concat(parameters('prefix'),'-kube-master-')]",
    "kubeMinionVmName": "[concat(parameters('prefix'),'-kube-minion-')]",
    "etcdVmName": "[concat(parameters('prefix'),'-etcd-')]",
    "scriptBlobLocation": "scripts/deploy.sh",
    "scriptBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('scriptBlobLocation'))]",
    "keysBlobLocation": "keys/id_rsa",
    "keysBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('keysBlobLocation'))]",
    "pubBlobLocation": "keys/id_rsa.pub",
    "pubBlobUrl": "[concat('https://',parameters('vaultAccountName'),'.blob.core.windows.net/',variables('pubBlobLocation'))]",
    "ansibleIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('ansibleIPAddressName'))]",
    "kubemastersLbPIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('kubemastersLbPIPAddressName'))]",
    "assetsStorageAccountId": "[resourceId(parameters('vaultAccountName'),'Microsoft.Storage/storageAccounts', parameters('vaultAccountName'))]",
  },
  "resources": [
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('ansibleVMName'),'/ansible')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "extensionLoopMasters",
        "extensionLoopMinions",
        "extensionLoopEtcd"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "[variables('scriptBlobUrl')]",
            "[variables('keysBlobUrl')]",
            "[variables('pubBlobUrl')]"
          ],
          "commandToExecute": "[concat('bash deploy.sh ',parameters('numberOfMasters'), ' ',parameters('numberOfMinions'), ' ',parameters('numberOfEtcd'), ' ', parameters('subnetMastersPrefix'), ' ', parameters('subnetMinionsPrefix'), ' ',parameters('subnetEtcdPrefix'), ' ',parameters('prefix'), ' ', ' ', reference(variables('ansibleIPAddressID'),providers('Microsoft.Network','publicIPAddresses').apiVersions[0]).dnsSettings.fqdn,' ', parameters('adminUsername'), ' ', reference(variables('kubemastersLbPIPAddressID'),providers('Microsoft.Network','publicIPAddresses').apiVersions[0]).dnsSettings.fqdn)]"
        },
        "protectedSettings": {
          "storageAccountName": "[parameters('vaultAccountName')]",
          "storageAccountKey": "[listKeys(variables('assetsStorageAccountId'),'2015-05-01-preview').key1]"
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('kubeMasterVmName'), copyIndex(),'/master')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "extensionLoopMasters",
        "count": "[parameters('numberOfMasters')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "https://github.com/DXFrance/AzureKubernetes/blob/master/Kubernetes-Ansible-Centos-Azure/scripts/first-boot.sh"
          ],
          "commandToExecute": "sh first-boot.sh"
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('kubeMinionVmName'), copyIndex(),'/minion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "extensionLoopMinions",
        "count": "[parameters('numberOfMinions')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "[parameters('fileUris')]"
          ],
          "commandToExecute": "[concat(parameters('commandToExecute'), ' ', resourceId('Microsoft.Network/networkInterfaces',concat(parameters('kubeMinionNicName'), copyindex())).ipConfigurations[0].properties.privateIPAddress,' minions')]"
        }
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('etcdVmName'), copyIndex(),'/etcd')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "extensionLoopEtcd",
        "count": "[parameters('numberOfEtcd')]"
      },
      "dependsOn": [
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.2",
        "settings": {
          "fileUris": [
            "[parameters('fileUris')]"
          ],
          "commandToExecute": "[concat(parameters('commandToExecute'), ' ', resourceId('Microsoft.Network/networkInterfaces',concat(parameters('etcdNicName'), copyindex())).ipConfigurations[0].properties.privateIPAddress,' etcd')]"
        }
      }
    }

  ],
  "outputs": {
    "result": {
      "value": "Extension Provisioning achieved",
      "type": "string"
    }
  }
}