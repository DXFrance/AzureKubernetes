{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "apiVersion": {
      "type": "string",
      "metadata": {
        "description": "Schema api version from parent template"
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix of the components"
      }
    },
    "numberOfMasters": {
      "type": "int",
      "metadata": {
        "description": "Number of kubernetes Masters nodes to create"
      }
    },
    "numberOfMinions": {
      "type": "int",
      "metadata": {
        "description": "Number of kubernetes Minions nodes to create"
      }
    },
    "numberOfEtcd": {
      "type": "int",
      "metadata": {
        "description": "Number of Etcd nodes to create"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "virtual Network Name"
      }
    },
    "ansibleNicName": {
      "type": "string",
      "metadata": {
        "description": "ansible NicName"
      }
    },
    "kubeMasterNicName": {
      "type": "string",
      "metadata": {
        "description": "kube Master NicName"
      }
    },
    "kubeMinionNicName": {
      "type": "string",
      "metadata": {
        "description": "kube Minion NicName"
      }
    },
    "etcdNicName": {
      "type": "string",
      "metadata": {
        "description": "kube Minion NicName"
      }
    }

  },
  "variables": {

    "kubemastersLbID": "[reference('CreatingPIPandLoadBalancer').outputs.kubemastersLbID.value]",
    "subnetMastersRef": "[reference('ProvisioningNetwork').outputs.subnetMastersRef.value]",
    "subnetMinionsRef": "[reference('ProvisioningNetwork').outputs.subnetMinionsRef.value]",
    "subnetEtcdRef": "[reference('ProvisioningNetwork').outputs.subnetEtcdRef.value]",
    "subnetAdminRef": "[reference('ProvisioningNetwork').outputs.subnetAdminRef.value]",

    "ansibleIPAddressName": "[concat(parameters('prefix'),'-pip-ansible')]",
    "nicPIPAddressType": "Dynamic",
    "masterNetworkInterfacesCopy": "nicopy-kube-master"
  },
  "resources": [
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('kubeMasterNicName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "[variables('masterNetworkInterfacesCopy')]",
        "count": "[parameters('numberOfMasters')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "MastersIpConfig",
            "properties": {
              "privateIPAllocationMethod": "[variables('nicPIPAddressType')]",
              "subnet": {
                "id": "[variables('subnetMastersRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('kubemastersLbID'), '/backendAddressPools/LoadBalancerBackend')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('kubemastersLbID'),'/inboundNatRules/HTTP-80', copyindex())]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('kubeMinionNicName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopMinions",
        "count": "[parameters('numberOfMinions')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "MinionsIpConfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetMinionsRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('etcdNicName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopEtcd",
        "count": "[parameters('numberOfEtcd')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "EtcdIpConfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetEtcdRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "parameters('ansibleNicName')",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ansibleIpConfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('ansibleIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetAdminRef')]"
              }
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "result": {
      "value": "Nic Provisioning achieved",
      "type": "string"
    }
  }
}